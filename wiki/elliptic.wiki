#summary elliptic package contents, usage example and installation requirements
<wiki:gadget url="http://elliptic.googlecode.com/svn/trunk/gadgets/elliptic-gadget-1.xml" border="0" width="728" height="15" />

<wiki:toc max_depth="3" />

= Elliptic Functions =

== ELLIPJ: Jacobi's elliptic functions ==

[http://code.google.com/p/elliptic/source/browse/trunk/ellipj.m ELLIPJ] evaluates the [http://en.wikipedia.org/wiki/Jacobi%27s_elliptic_functions Jacobi's elliptic functions] and [http://mathworld.wolfram.com/JacobiAmplitude.html Jacobi's amplitude].

`[Sn,Cn,Dn,Am] = ELLIPJ(U,M)` returns the values of the Jacobi elliptic functions `SN`, `CN`, `DN` and `AM` evaluated for corresponding elements of argument U and parameter M.  The arrays U and M must be of the same size (or either can be scalar).  As currently implemented, M is limited to `0 <= M <= 1`. 

*General definition:*
{{{
u = Integral(1/sqrt(1-m^2*sin(theta)^2), 0, phi);
Sn(u) = sin(phi);
Cn(u) = cos(phi);
Dn(u) = sqrt(1-m^2*sin(phi)^2);
}}}

_Depends on_  `AGM`, `ELLIPKE`.<br>
_Used by_ `THETA`.<br>
_See also_ `ELLIPKE`.


== ELLIPJI: Jacobi's elliptic functions of the complex argument ==

[http://code.google.com/p/elliptic/source/browse/trunk/ellipji.m ELLIPJI] evaluates the Jacobi elliptic functions of complex phase `U`.

`[Sni,Cni,Dni] = ELLIPJ(U,M)` returns the values of the Jacobi elliptic functions `SNI`, `CNI` and `DNI` evaluated for corresponding  elements of argument `U` and parameter `M`. The arrays `U` and `M` must  be of the same size (or either can be scalar).  As currently implemented, `M` is real and limited to `0 <= M <= 1`. 


*Example:
{{{
[phi1,phi2] = meshgrid(-pi:3/20:pi, -pi:3/20:pi);
phi = phi1 + phi2*i;
[Sni,Cni,Dni] = ellipji(phi, 0.99);
}}}

_Depends on_ `AGM`, `ELLIPJ`, `ELLIPKE`<br>
_See also_ `ELLIPTIC12`, `ELLIPTIC12I`

== JACOBITHETAETA: Jacobi's Theta and Eta Functions ==
[http://code.google.com/p/elliptic/source/browse/trunk/jacobiThetaEta.m JACOBITHETAETA] evaluates Jacobi's theta and eta functions.

`[Th, H] = JACOBITHETAETA(U,M)` returns the values of the Jacobi's theta and eta elliptic functions `TH` and `H` evaluated for corresponding elements of argument `U` and parameter `M`.  The arrays `U` and `M` must be the same size (or either can be scalar).  As currently implemented, `M` is real and limited to `0 <= M <= 1`. 

*Example:
{{{
[phi,alpha] = meshgrid(0:5:90, 0:2:90);                  
[Th, H] = jacobiThetaEta(pi/180*phi, sin(pi/180*alpha).^2);  
}}}

_Depends on_ `AGM`, `ELLIPJ`, `ELLIPKE`<br>
_See also_ `ELLIPTIC12`, `ELLIPTIC12I`, `THETA` 
 
== THETA: Theta Functions of Four Types ==
[http://code.google.com/p/elliptic/source/browse/trunk/theta.m THETA] evaluates theta functions of four types.

`Th = THETA(TYPE,V,M)` returns values of theta functions
evaluated for corresponding values of argument `V` and parameter `M`. `TYPE` is a type of the theta function, there are four numbered types. The arrays `V` and `M` must be the same size (or either can be scalar). As currently implemented, `M` is limited to `0 <= M <= 1`. 

`Th = THETA(TYPE,V,M,TOL)` computes the theta and eta elliptic functions to the accuracy `TOL` instead of the default `TOL = EPS`.  

The parameter `M` is related to the nome `Q` as `Q = exp(-pi*K(1-M)/K(M))`. Some definitions of the Jacobi's elliptic functions use the modulus `k` instead of the parameter `m`.  They are related by `m = k^2`.

*Example:
{{{
[phi,alpha] = meshgrid(0:5:90, 0:2:90);                  
Th1 = theta(1, pi/180*phi, sin(pi/180*alpha).^2);  
Th2 = theta(2, pi/180*phi, sin(pi/180*alpha).^2);  
Th3 = theta(3, pi/180*phi, sin(pi/180*alpha).^2);  
Th4 = theta(4, pi/180*phi, sin(pi/180*alpha).^2);  
}}}

_Depends on_ `AGM`, `ELLIPJ`, `ELLIPKE`, `JACOBITHETAETA`<br>
_See also_ `ELLIPTIC12`, `ELLIPTIC12I`

= Elliptic Intergrals =

== ELLIPTIC12: Incomplete Elliptic Integrals of the First, Second Kind and Jacobi's Zeta Function ==
[http://code.google.com/p/elliptic/source/browse/trunk/elliptic12.m ELLIPTIC12] evaluates the value of the Incomplete Elliptic Integrals of the First, Second Kind and Jacobi's Zeta Function.

`[F,E,Z] = ELLIPTIC12(U,M,TOL)` uses the method of the Arithmetic-Geometric Mean and Descending Landen Transformation described in [http://code.google.com/p/elliptic/#References 1] Ch. 17.6, to determine the value of the Incomplete Elliptic Integrals of the First, Second Kind and Jacobi's Zeta Function (see [http://code.google.com/p/elliptic/#References 1], [http://code.google.com/p/elliptic/#References 2]).

*General definition:*
{{{
F(phi,m) = int(1/sqrt(1-m*sin(t)^2), t=0..phi);
E(phi,m) = int(sqrt(1-m*sin(t)^2), t=0..phi);
Z(phi,m) = E(u,m) - E(m)/K(m)*F(phi,m).
}}}


Tables generating code (see [http://code.google.com/p/elliptic/#References 1], pp. 613-621):
{{{
[phi,alpha] = meshgrid(0:5:90, 0:2:90);                  % modulus and phase in degrees
[F,E,Z] = elliptic12(pi/180*phi, sin(pi/180*alpha).^2);  % values of integrals
}}}

_Depends on_ `AGM`<br>
_See also_ `ELLIPKE`, `ELLIPJ`, `ELLIPTIC12I`, `ELLIPTIC3`, `THETA`.

== ELLIPTIC12I: Incomplete Elliptic Integrals of the First, Second Kind and Jacobi's Zeta Function of the complex argument ==
[http://code.google.com/p/elliptic/source/browse/trunk/elliptic12i.m ELLIPTIC12i] evaluates the Incomplete Elliptic Integrals of the First, Second Kind and Jacobi's Zeta Function for the complex value of phase `U`. Parameter `M` must be in the range `0 <= M <= 1`. 

`[Fi,Ei,Zi] = ELLIPTIC12i(U,M,TOL)` where `U` is a complex phase in radians, `M` is the real parameter and `TOL` is the tolerance (optional). Default value for the tolerance is `eps = 2.220e-16`.

`ELLIPTIC12i` uses the function `ELLIPTIC12` to evaluate the values of corresponding integrals.

*Example:
{{{
[phi1,phi2] = meshgrid(-2*pi:3/20:2*pi, -2*pi:3/20:2*pi);
phi = phi1 + phi2*i;
[Fi,Ei,Zi] = elliptic12i(phi, 0.5);
}}}

_Depends on_ `ELLIPTIC12`, `AGM`<br>
_See also_ `ELLIPKE`, `ELLIPJ`, `ELLIPTIC3`, `THETA`.
 
== ELLIPTIC3: Incomplete Elliptic Integral of the Third Kind ==
[http://code.google.com/p/elliptic/source/browse/trunk/elliptic3.m ELLIPTIC3] evaluates incomplete elliptic integral of the third kind `Pi = ELLIPTIC3(U,M,C)` where `U` is a phase in radians, `0 < M < 1` is the module and `0 < C < 1` is a parameter. 

`ELLIPTIC3` uses Gauss-Legendre 10 points quadrature template described in `[3]` to determine the value of the Incomplete Elliptic Integral of the Third Kind (see `[1, 2]`).

*General definition:
{{{
Pi(u,m,c) = int(1/((1 - c*sin(t)^2)*sqrt(1 - m*sin(t)^2)), t=0..u)
}}}

Tables generating code ([1], pp. 625-626):
{{{
[phi,alpha,c] = meshgrid(0:15:90, 0:15:90, 0:0.1:1);
Pi = elliptic3(pi/180*phi, sin(pi/180*alpha).^2, c);  % values of integrals
}}}

= Weierstrass's elliptic functions (in development)=
<font color="red">!IN DEVELOPMENT, help needed!</font> []

= Elliptic Related Functions =

== AGM: Artihmetic Geometric Mean ==
[http://code.google.com/p/elliptic/source/browse/trunk/agm.m AGM] calculates the [http://en.wikipedia.org/wiki/Arithmetic-geometric_mean Artihmetic Geometric Mean] of `A` and `B` (see [http://code.google.com/p/elliptic/#References 1]). 

`[A,B,C,N] = AGM(A0,B0,C0,TOL)` carry out the process of the arithmetic geometric mean, starting with a given positive numbers triple `(A0, B0, C0)` and returns in 
`(A, B, C)` the generated sequence. `N` is a number of steps (returns in the value`uint32`).

The general scheme of the procedure:
{{{
A(i) = 1/2*( A(i-1)+B(i-1) );     A(0) = A0;
B(i) = sqrt( A(i-1)*B(i-1) );     B(0) = B0;
C(i) = 1/2*( A(i-1)+B(i-1) );     C(0) = C0;
}}}
Stop at the `N`-th step when `A(N) = B(N)`, i.e., when `C(N) = 0`. 

_Used by_  `ELLIPJ` and `ELLIPTIC12`.<br>_See also_ `ELLIPKE`, `ELLIPTIC3`, `THETA`.

== NOMEQ: The Value of Nome `q = q(m)` ==
[http://code.google.com/p/elliptic/source/browse/trunk/nomeq.m NOMEQ] gives the value of Nome `q = q(m)`.

Nome `Q = nomeq(M,TOL)`, where `0<=M<=1` is the module and `TOL` is the tolerance (optional). Default value for the tolerance is `eps = 2.220e-16`.

_Used by_  `ELLIPJ`.<br>
_Depends on_ `ELLIPKE`<br>
_See also_ `ELLIPTIC12I`, `ELLIPTIC3`, `THETA`.

== INVERSENOMEQ: The Value of Nome `m = m(q)` ==
[http://code.google.com/p/elliptic/source/browse/trunk/inversenomeq.m INVERSENOMEQ] gives the value of Nome `m = m(q)`.

`M = inversenomeq(q)`, where `Q` is the Nome of q-series.

*WARNING*. The function `INVERSENOMEQ` does not return correct values of `M` for `Q > 0.6`, because of computer precision limitation. The function `NomeQ(m)` has an essential singularity at `M = 1`, so it cannot be inverted at this point and actually it is very hard to find and inverse in the neigborhood also.

More preciesly:
{{{
nomeq(1) = 1
nomeq(1-eps) = 0.77548641878026
}}}

*Example:
{{{
nomeq(inversenomeq([0.001 0.3 0.4 0.5 0.6 0.7 0.8]))
}}}

_Used by_  `ELLIPJ`.<br>
_Depends on_ `ELLIPKE`<br>
_See also_ `ELLIPTIC12I`, `ELLIPTIC3`, `THETA`.


= References =
  # M. Abramowitz and I.A. Stegun, "[http://www.math.ucla.edu/~cbm/aands/ Handbook of Mathematical Functions]" Dover Publications", 1965, Ch. 17.1 - 17.6.
  # D. F. Lawden, "[http://www.amazon.com/Elliptic-Functions-Applications-Mathematical-Sciences/dp/0387969659 Elliptic Functions and Applications]" Springer-Verlag, vol. 80, 1989
  # S. Zhang, J. Jin, "[http://jin.ece.uiuc.edu/specfunc.html Computation of Special Functions]" (Wiley, 1996).
  # B. Carlson, "[http://nvl.nist.gov/pub/nistpubs/jres/107/5/j75car.pdf Three Improvements in Reduction and Computation of Elliptic Integrals]", J. Res. Natl. Inst. Stand. Technol. 107 (2002) 413-418.
  # N. H. Abel, "[http://mathdl.maa.org/mathDL/46/?pa=content&sa=viewDocument&nodeId=1557 Studies on Elliptic Functions]", english translation from french by Marcus Emmanuel Barnes. Original "Recherches sur les fonctions elliptiques", Journal fr die reine und angewandte Mathematik, Vol. 2, 1827. pp. 101-181.
  # B. C. Berndt, H. H. Chan, S.-S. Huang, "[http://www.math.uiuc.edu/~berndt/articles/ellipticintegral.pdf Incomplete Elliptic Integrals in Ramanujan's Lost Notebook]" in q-series from a Contemporary Perspective, M. E. H. Ismail and D. Stanton, eds., Amer. Math. Soc., 2000, pp. 79-126.


= External Links =
  * [http://en.wikipedia.org/wiki/Elliptic_integral Elliptic integrals] and [http://en.wikipedia.org/wiki/Jacobi's_elliptic_functions Jacobi's elliptic functions] from Wikipedia.
  * [http://www.alglib.net/ ALGLIB] - cross-platform numerical analysis and data processing library.
  * [http://www.youtube.com/user/kojocho2 Graphs by Kojocho2], Graph of complex functions and complex analysis.

=Some interesting applications=
 
== Fingerprints In The Sky Explained By 'Beautiful Mathematics'.  [http://www.sciencedaily.com/releases/2004/11/041123112414.htm  ScienceDaily (Nov. 23, 2004)] ==

  _This is beautiful mathematics in the sky. Using elliptic integrals, we’ve been able to replace pages and pages of formulae with one very simple solution that predicts the pattern extremely well._ 

== Mathematicians Solve 'Trillion Triangle' Problem.  [http://www.sciencedaily.com/releases/2009/09/090922095651.htm ScienceDaily (Sep. 22, 2009)] ==

  _According to Brian Conrey, Director of the American Institute of Mathematics, "Old problems like this may seem obscure, but they generate a lot of interesting and useful research as people develop new ways to attack them."_


<br>
<br>
<wiki:gadget url="http://elliptic.googlecode.com/svn/trunk/gadgets/elliptic-gadget-1.xml" border="0" width="728" height="15" />